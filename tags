!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
<C-e>	.config/nvim/init.vim	/^    map <C-e> :NERDTreeToggle<CR>$/;"	m
<Leader>K	.config/nvim/init.vim	/^    nmap <Leader>K :call phpactor#Hover()<CR>$/;"	m
<Leader>cc	.config/nvim/init.vim	/^    nmap <Leader>cc :call phpactor#ClassNew()<CR>$/;"	m
<Leader>ee	.config/nvim/init.vim	/^    nmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>$/;"	m
<Leader>ee	.config/nvim/init.vim	/^    vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>$/;"	m
<Leader>em	.config/nvim/init.vim	/^    vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>$/;"	m
<Leader>mm	.config/nvim/init.vim	/^    nmap <Leader>mm :call phpactor#ContextMenu()<CR>$/;"	m
<Leader>nn	.config/nvim/init.vim	/^    nmap <Leader>nn :call phpactor#Navigate()<CR>$/;"	m
<Leader>tt	.config/nvim/init.vim	/^    nmap <Leader>tt :call phpactor#Transform()<CR>$/;"	m
<Leader>u	.config/nvim/init.vim	/^    nmap <Leader>u :call phpactor#UseAdd()<CR>$/;"	m
<a-[>	.config/nvim/init.vim	/^    nmap <a-[> :call phpactor#FindReferences()<CR>$/;"	m
<a-]>	.config/nvim/init.vim	/^    nmap <a-]> :call phpactor#GotoDefinition()<CR>$/;"	m
<leader>]	.config/nvim/init.vim	/^    nnoremap <leader>] :<c-u>FZF<CR>$/;"	m
<leader>b	.config/nvim/init.vim	/^    nnoremap <leader>b :<c-u>Buffers<CR>$/;"	m
<leader>e	.config/nvim/init.vim	/^    nnoremap  <leader>e :e $MYVIMRC<CR>$/;"	m
<leader>f	.config/nvim/init.vim	/^    nnoremap <leader>f :<c-u>FZF %:h<CR>$/;"	m
<leader>n	.config/nvim/init.vim	/^    nnoremap <leader>n :<c-u>History<CR>$/;"	m
<leader>p	.config/nvim/init.vim	/^    nnoremap <leader>p "+p$/;"	m
<leader>p	.config/nvim/init.vim	/^    vnoremap <leader>p "+p$/;"	m
<leader>s	.config/nvim/init.vim	/^    nnoremap  <leader>s :source $MYVIMRC<CR>$/;"	m
<leader>t	.config/nvim/init.vim	/^    nmap <leader>t :TagbarToggle<CR>$/;"	m
<leader>y	.config/nvim/init.vim	/^    nnoremap  <leader>y "+y$/;"	m
<leader>y	.config/nvim/init.vim	/^    vnoremap  <leader>y "+y$/;"	m
BLACK	.config/qtile/config.py	/^BLACK = "#1A1C1D"$/;"	v
BLUE	.config/qtile/config.py	/^BLUE = color_data['colors']['color4']$/;"	v
CYAN	.config/qtile/config.py	/^CYAN = color_data['colors']['color6']$/;"	v
Commands	.config/qtile/config.py	/^class Commands:$/;"	c
FONT	.config/qtile/config.py	/^FONT = font_data[0]$/;"	v
FONT_SIZE	.config/qtile/config.py	/^FONT_SIZE = int(font_data[1].split('=')[1])$/;"	v
GREEN	.config/qtile/config.py	/^GREEN = color_data['colors']['color2']$/;"	v
Key	.config/qtile/config.py	/^from libqtile.config import EzKey as Key, Screen, Group, Drag, Click$/;"	x
MAGENTA	.config/qtile/config.py	/^MAGENTA = color_data['colors']['color5']$/;"	v
RED	.config/qtile/config.py	/^RED = color_data['colors']['color1']$/;"	v
WHITE	.config/qtile/config.py	/^WHITE = color_data['colors']['color7']$/;"	v
YELLOW	.config/qtile/config.py	/^YELLOW = color_data['colors']['color3']$/;"	v
Zordsdavini dotfiles	README.md	/^# Zordsdavini dotfiles$/;"	c
alsamixer	.config/qtile/config.py	/^    alsamixer = 'st -e alsamixer'$/;"	v	class:Commands
auto_fullscreen	.config/qtile/config.py	/^auto_fullscreen = True$/;"	v
autorandr	.config/qtile/config.py	/^    autorandr = ['autorandr', '-c']$/;"	v	class:Commands
bottom	.config/qtile/config.py	/^bottom = bar.Bar($/;"	v
bring_front_click	.config/qtile/config.py	/^bring_front_click = False$/;"	v
cloud	.config/qtile/config.py	/^cloud = path.realpath(getenv('HOME') + '\/cloud') $/;"	v
color_data	.config/qtile/config.py	/^color_data = json.loads(open(getenv('HOME') + '\/.cache\/wal\/colors.json').read())$/;"	v
commands	.config/qtile/config.py	/^commands = Commands()$/;"	v
cursor_warp	.config/qtile/config.py	/^cursor_warp = False$/;"	v
dgroups_app_rules	.config/qtile/config.py	/^dgroups_app_rules = []  # type: List$/;"	v
dgroups_key_binder	.config/qtile/config.py	/^dgroups_key_binder = None$/;"	v
extension_defaults	.config/qtile/config.py	/^extension_defaults = dict($/;"	v
floating_layout	.config/qtile/config.py	/^floating_layout = layout.Floating(float_rules=[$/;"	v
focus_on_window_activation	.config/qtile/config.py	/^focus_on_window_activation = "smart"$/;"	v
follow_mouse_focus	.config/qtile/config.py	/^follow_mouse_focus = True$/;"	v
font_data	.config/qtile/config.py	/^font_data = result.resources['*.font'].split(':')$/;"	v
g:fzf_buffers_jump	.config/nvim/init.vim	/^    let g:fzf_buffers_jump = 1$/;"	v
g:lightline	.config/nvim/init.vim	/^    let g:lightline = {$/;"	v
g:phpactorBranch	.config/nvim/init.vim	/^    let g:phpactorBranch = "develop"$/;"	v
g:phpactorBranch	.config/nvim/init.vim	/^    let g:phpactorBranch = 'develop'$/;"	v
g:phpactorOmniAutoClassImport	.config/nvim/init.vim	/^    let g:phpactorOmniAutoClassImport = v:true$/;"	v
g:phpactorPhpBin	.config/nvim/init.vim	/^    let g:phpactorPhpBin = 'php'$/;"	v
groups	.config/qtile/config.py	/^groups = [Group(i) for i in "1234567890"]$/;"	v
keyboard_widget	.config/qtile/config.py	/^keyboard_widget = widget.KeyboardLayout(configured_keyboards=['us', 'lt', 'ru phonetic'], option/;"	v
keys	.config/qtile/config.py	/^keys = [$/;"	v
layouts	.config/qtile/config.py	/^layouts = [$/;"	v
main	.config/qtile/config.py	/^main = None$/;"	v
mapleader	.config/nvim/init.vim	/^    let mapleader='\\'$/;"	v
mouse	.config/qtile/config.py	/^mouse = [$/;"	v
reload_screen	.config/qtile/config.py	/^    def reload_screen(self):$/;"	m	class:Commands
restart_on_randr	.config/qtile/config.py	/^def restart_on_randr(qtile, ev):$/;"	f
result	.config/qtile/config.py	/^result = xrp.parse_file(xresources, 'utf-8')$/;"	v
screens	.config/qtile/config.py	/^screens = [$/;"	v
screenshot_all	.config/qtile/config.py	/^    screenshot_all = 'zscrot'$/;"	v	class:Commands
screenshot_selection	.config/qtile/config.py	/^    screenshot_selection = 'zscrot s'$/;"	v	class:Commands
screenshot_window	.config/qtile/config.py	/^    screenshot_window = 'zscrot u'$/;"	v	class:Commands
startup	.config/qtile/config.py	/^def startup():$/;"	f
startup_once	.config/qtile/config.py	/^def startup_once():$/;"	f
t	.tmux.conf	/^bind -n WheelDownPane select-pane -t= \\; send-keys -M$/;"	k
t	.tmux.conf	/^bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode/;"	k
top	.config/qtile/config.py	/^top = bar.Bar($/;"	v
update	.config/qtile/config.py	/^    update = "st -e yay -Syu"$/;"	v	class:Commands
volume_down	.config/qtile/config.py	/^    volume_down = 'amixer -q -c 0 sset Master 5dB-'$/;"	v	class:Commands
volume_toggle	.config/qtile/config.py	/^    volume_toggle = 'amixer -q set Master toggle'$/;"	v	class:Commands
volume_up	.config/qtile/config.py	/^    volume_up = 'amixer -q -c 0 sset Master 5dB+'$/;"	v	class:Commands
widget_defaults	.config/qtile/config.py	/^widget_defaults = dict($/;"	v
wmname	.config/qtile/config.py	/^wmname = "LG3D"$/;"	v
xresources	.config/qtile/config.py	/^xresources = path.realpath(getenv('HOME') + '\/.Xresources') $/;"	v
z_maximize	.config/qtile/config.py	/^def z_maximize(qtile):$/;"	f
z_next_keyboard	.config/qtile/config.py	/^def z_next_keyboard(qtile):$/;"	f
